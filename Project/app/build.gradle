apply plugin: 'com.android.application'

//设置发布的显示版本号
//def getVersionName(){
//    return "1.1.0"
//}
android {
    signingConfigs {
        debug {
            keyAlias 'jieshuren'
            keyPassword 'jhuilei1984'
            storeFile file('D:/AndroidKey/jieshuren.jks')
            storePassword 'jhuilei1984'
        }
        release {
            storeFile file('D:/AndroidKey/jieshuren.jks');
            keyAlias "jieshuren"
            keyPassword "jhuilei1984"
            storePassword "jhuilei1984"
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            def fileName
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                File outputDirectory = new File(outputFile.parent);
                if (variant.buildType.name.equals('release')) {
                     fileName = "借书人V${defaultConfig.versionName}_${defaultConfig.versionCode}.apk"
                   // output.outputFile = new File(outputDirectory, fileName)
                    //                       def fileName = "slzx_vn${defaultConfig.versionName}_vc${defaultConfig.versionCode}_${releaseTime()}_release.apk"
                }else if (variant.buildType.name.equals('debug')) {
                    fileName = "借书人_V${defaultConfig.versionName}_debug.apk"
                }
                output.outputFile = new File(outputDirectory, fileName)
            }
        }
    }
    //修改打包不能成功配置
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }


    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "ren.jieshu.jieshuren"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 4
        versionName "1.3"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk { //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "arm64-v8a", "x86_64"
        }
    }
    //针对不同CPU 类型打不同的包
//    splits {
//        abi {
//            enable true
//            reset()
//            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a' //select ABIs to build APKs for
//            universalApk true //generate an additional APK that contains all the ABIs
//        }
//    }
//    // map for the version code
//    project.ext.versionCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3, 'mips': 5, 'mips64': 6, 'x86': 8, 'x86_64': 9]
//    android.applicationVariants.all { variant ->
//        // assign different version code for each output
//        variant.outputs.each { output ->
//            output.versionCodeOverride =
//                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1000000 + android.defaultConfig.versionCode
//        }
//    }
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false

    }
    buildTypes {
        release {
            buildConfigField("boolean","API_DEBUG","false")
            minifyEnabled false
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            buildConfigField("boolean","API_DEBUG","true")
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    configurations.all {

        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion '25.3.0'
                }
            }
        }
    }

}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile files('libs/SocialSDK_WeiXin_Full.jar')
    compile files('libs/umeng_shareboard_widget.jar')
    compile files('libs/umeng_social_api.jar')
    compile files('libs/umeng_social_net.jar')
    compile files('libs/umeng_social_shareboard.jar')
    compile files('libs/umeng_social_tool.jar')
    //充值传递数据
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.1'
    compile 'com.android.support:recyclerview-v7:25.2.0'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.daimajia.slider:library:1.1.5@aar'
    compile 'com.jiechic.library:xUtils:2.6.14'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.android.support:support-v4:25.0.0-alpha1'
    compile 'com.facebook.fresco:fresco:0.12.0'
    compile 'com.zhy:okhttputils:2.6.2'
    compile 'com.android.support:design:25.2.0'
    compile 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:+'
    compile 'com.amap.api:3dmap:latest.integration'
    compile 'com.amap.api:search:latest.integration'
    compile 'com.zaaach:citypicker:1.1'
    compile 'com.netease.scan:lib-qr-scan:1.0.0'
    compile 'com.allenliu.versionchecklib:library:1.5'
    compile 'org.greenrobot:eventbus:3.0.0'
    testCompile 'junit:junit:4.12'
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.2.0
    compile 'com.tencent.bugly:nativecrashreport:latest.release'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
}
